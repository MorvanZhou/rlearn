# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rlearn.distributed.gradient import param_pb2 as rlearn_dot_distributed_dot_gradient_dot_param__pb2


class ParamsStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServiceReady = channel.unary_unary(
            '/params.Params/ServiceReady',
            request_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyReq.SerializeToString,
            response_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyResp.FromString,
        )
        self.Start = channel.unary_stream(
            '/params.Params/Start',
            request_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartReq.SerializeToString,
            response_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartResp.FromString,
        )
        self.Sync = channel.stream_stream(
            '/params.Params/Sync',
            request_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncReq.SerializeToString,
            response_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncResp.FromString,
        )
        self.Terminate = channel.unary_unary(
            '/params.Params/Terminate',
            request_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateReq.SerializeToString,
            response_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateResp.FromString,
        )


class ParamsServicer(object):
    """The greeting service definition.
    """

    def ServiceReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sync(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParamsServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ServiceReady': grpc.unary_unary_rpc_method_handler(
            servicer.ServiceReady,
            request_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyReq.FromString,
            response_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyResp.SerializeToString,
        ),
        'Start': grpc.unary_stream_rpc_method_handler(
            servicer.Start,
            request_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartReq.FromString,
            response_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartResp.SerializeToString,
        ),
        'Sync': grpc.stream_stream_rpc_method_handler(
            servicer.Sync,
            request_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncReq.FromString,
            response_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncResp.SerializeToString,
        ),
        'Terminate': grpc.unary_unary_rpc_method_handler(
            servicer.Terminate,
            request_deserializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateReq.FromString,
            response_serializer=rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateResp.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'params.Params', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Params(object):
    """The greeting service definition.
    """

    @staticmethod
    def ServiceReady(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/params.Params/ServiceReady',
                                             rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyReq.SerializeToString,
                                             rlearn_dot_distributed_dot_gradient_dot_param__pb2.ServiceReadyResp.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
              target,
              options=(),
              channel_credentials=None,
              call_credentials=None,
              insecure=False,
              compression=None,
              wait_for_ready=None,
              timeout=None,
              metadata=None):
        return grpc.experimental.unary_stream(request, target, '/params.Params/Start',
                                              rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartReq.SerializeToString,
                                              rlearn_dot_distributed_dot_gradient_dot_param__pb2.StartResp.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout,
                                              metadata)

    @staticmethod
    def Sync(request_iterator,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/params.Params/Sync',
                                               rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncReq.SerializeToString,
                                               rlearn_dot_distributed_dot_gradient_dot_param__pb2.SyncResp.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout,
                                               metadata)

    @staticmethod
    def Terminate(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/params.Params/Terminate',
                                             rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateReq.SerializeToString,
                                             rlearn_dot_distributed_dot_gradient_dot_param__pb2.TerminateResp.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
