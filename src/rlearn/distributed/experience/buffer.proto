syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.env";
option java_outer_classname = "ReplayBufferProto";
option objc_class_prefix = "HLW";

package replayBuffer;

// The greeting service definition.
service ReplayBuffer {
  rpc ServiceReady (ServiceReadyReq) returns (ServiceReadyResp) {}
  rpc InitBuf (InitBufReq) returns (InitBufResp) {}
  rpc LearnerSetVersion (LearnerSetVersionReq) returns (LearnerSetVersionResp) {}
  rpc UploadData (stream UploadDataReq) returns (UploadDataResp) {}
  rpc DownloadData (DownloadDataReq) returns (stream DownloadDataResp) {}
  rpc Stop(StopReq) returns (StopResp) {}
}

message ServiceReadyReq {
  string requestId = 1;
}

message ServiceReadyResp {
  bool ready = 1;
  string requestId = 2;
}

message InitBufReq {
  bool isOnPolicy = 1;
  string bufferType = 2;
  uint64 bufferSize = 3;
  string requestId = 4;
}

message InitBufResp {
  bool done = 1;
  string err = 2;
  string requestId = 3;
}

message LearnerSetVersionReq {
  uint64 version = 1;
  string requestId = 2;
}

message LearnerSetVersionResp {
  bool done = 1;
  string err = 2;
  string requestId = 3;
}

message UploadDataMeta {
  uint64 version = 1;
  string attributes = 2;  // 包含 shape 和其他信息
  string requestId = 3;
}

message UploadDataReq {
  oneof request {
    UploadDataMeta meta = 1;
    bytes chunkData = 2;
  }
}

message UploadDataResp {
  bool done = 1;
  string err = 2;
  string requestId = 3;
}

message DownloadDataReq {
  int32 maxSize = 1;
  string requestId = 2;
}

message DownloadDataMeta {
  string attributes = 1;
  string err = 2;
  string requestId = 3;
}

message DownloadDataResp {
  oneof request {
    DownloadDataMeta meta = 1;
    bytes chunkData = 2;
  }
}

message StopReq {
  string requestId = 1;
}

message StopResp {
  bool done = 1;
  string requestId = 2;
}
